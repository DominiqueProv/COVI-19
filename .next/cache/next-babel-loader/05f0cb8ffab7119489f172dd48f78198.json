{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Domingo/WEB-Project/COVI-19/components/CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useStats from '../utils/useStats';\nimport { useState } from 'react';\nimport Stats from './Stats';\nexport default function CountrySelector() {\n  //passing down the full url as a param to 'useInfoAPI'\n  var countries = useStats('https://covid19.mathdro.id/api/countries');\n  console.log(countries);\n\n  var _useState = useState('CA'),\n      selectedCountry = _useState[0],\n      setSelectedCountry = _useState[1]; //if statement for the loader to kick in (!stats) \n\n\n  if (!countries) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Loading...\"); //return someting JSX\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Currently Showing\", selectedCountry), __jsx(\"select\", {\n    onChange: function onChange(event) {\n      setSelectedCountry(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, Object.entries(countries.countries).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        country = _ref2[0],\n        code = _ref2[1];\n\n    return __jsx(\"option\", {\n      key: code,\n      value: countries.iso3[code],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, country);\n  })), __jsx(Stats, {\n    url: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n} //Object.entries first to be able to run map on a array\n//Arrow function implies a return () instead of {}\n//","map":{"version":3,"sources":["/Users/Domingo/WEB-Project/COVI-19/components/CountrySelector.js"],"names":["useStats","useState","Stats","CountrySelector","countries","console","log","selectedCountry","setSelectedCountry","event","target","value","Object","entries","map","country","code","iso3"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC;AACA,MAAMC,SAAS,GAAGJ,QAAQ,CAAC,0CAAD,CAA1B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AAHwC,kBAIMH,QAAQ,CAAC,IAAD,CAJd;AAAA,MAIjCM,eAJiC;AAAA,MAIhBC,kBAJgB,iBAKxC;;;AACA,MAAI,CAACJ,SAAL,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,CANwB,CAOxC;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsBG,eAAtB,CADF,EAEE;AACE,IAAA,QAAQ,EAAE,kBAAAE,KAAK,EAAI;AACjBD,MAAAA,kBAAkB,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGC,MAAM,CAACC,OAAP,CAAeT,SAAS,CAACA,SAAzB,EAAoCU,GAApC,CAAwC;AAAA;AAAA,QAAEC,OAAF;AAAA,QAAUC,IAAV;;AAAA,WACvC;AAAQ,MAAA,GAAG,EAAEA,IAAb;AACQ,MAAA,KAAK,EAAEZ,SAAS,CAACa,IAAV,CAAeD,IAAf,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGD,OAFH,CADuC;AAAA,GAAxC,CALH,CAFF,EAcE,MAAC,KAAD;AACE,IAAA,GAAG,IADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AAoBD,C,CAIK;AACA;AACA","sourcesContent":["import useStats from '../utils/useStats';\nimport { useState } from 'react';\nimport Stats from './Stats';\n\nexport default function CountrySelector() {\n  //passing down the full url as a param to 'useInfoAPI'\n  const countries = useStats('https://covid19.mathdro.id/api/countries');\n  console.log(countries); \n  const [selectedCountry, setSelectedCountry] = useState('CA');\n  //if statement for the loader to kick in (!stats) \n  if (!countries) return <p>Loading...</p>;\n  //return someting JSX\n  return (\n    <div>\n      <h2>Currently Showing{selectedCountry}</h2>\n      <select\n        onChange={event => {\n          setSelectedCountry(event.target.value);\n        }}\n        >\n        {Object.entries(countries.countries).map(([country,code]) => (\n          <option key={code} \n                  value={countries.iso3[code]}>\n            {country}\n            </option>\n        ))}\n      </select>\n      <Stats\n        url={``}\n        ></Stats>\n    </div>\n  );\n}\n\n\n\n      //Object.entries first to be able to run map on a array\n      //Arrow function implies a return () instead of {}\n      //\n"]},"metadata":{},"sourceType":"module"}