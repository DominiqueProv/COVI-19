{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react'; //we want to call it only once...\n// function with 'url' as argument\n\nexport default function useStats(url) {\n  //useState\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1]; //useEffect with async function to fetch\n\n\n  useEffect(function () {\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError(); //encapsulate the response process with .json() in a var data (await)\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                setError(err);\n              }));\n\n            case 4:\n              data = _context.sent;\n              //update the initial stats\n              setStats(data);\n              setLoading(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    } //call function to fetch\n\n\n    fetchData();\n  }, [url]); //return something\n\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["/Users/Domingo/WEB-Project/COVI-19/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","fetch","then","res","json","err","data"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;AAEA;;AACA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC;AADoC,kBAEVH,QAAQ,EAFE;AAAA,MAE7BI,KAF6B;AAAA,MAEtBC,QAFsB;;AAAA,mBAGNL,QAAQ,CAAC,KAAD,CAHF;AAAA,MAG7BM,OAH6B;AAAA,MAGpBC,UAHoB;;AAAA,mBAIVP,QAAQ,EAJE;AAAA,MAI7BQ,KAJ6B;AAAA,MAItBC,QAJsB,kBAKpC;;;AACAR,EAAAA,SAAS,CAAC,YAAM;AAEd,aAAeS,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEH,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ,GAFV,CAGE;;AAHF;AAAA,+CAIqBE,KAAK,CAACR,GAAD,CAAL,CAChBS,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADQ,WAEV,UAAAC,GAAG,EAAG;AACXN,gBAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,eAJgB,CAJrB;;AAAA;AAIQC,cAAAA,IAJR;AASE;AACAX,cAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFc,CAed;;;AACAG,IAAAA,SAAS;AACV,GAjBQ,EAiBN,CAACP,GAAD,CAjBM,CAAT,CANoC,CAwBpC;;AACA,SAAO;AACLC,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAPA,OAFK;AAGLE,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD","sourcesContent":["import { useState, useEffect } from 'react';\n\n//we want to call it only once...\n\n// function with 'url' as argument\nexport default function useStats(url) {\n  //useState\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState()\n  //useEffect with async function to fetch\n  useEffect(() => {\n\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      //encapsulate the response process with .json() in a var data (await)\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err =>{\n          setError(err);\n        });\n      //update the initial stats\n      setStats(data);\n      setLoading(false);\n    }\n    //call function to fetch\n    fetchData();\n  }, [url]);\n  //return something\n  return {\n    stats,\n    loading,\n    error,\n  };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}