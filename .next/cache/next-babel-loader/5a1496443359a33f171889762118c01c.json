{"ast":null,"code":"var _jsxFileName = \"/Users/Domingo/WEB-Project/COVI-19/components/CountrySelector.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useStats from '../utils/useStats';\nimport { useState } from 'react';\nexport default function CountrySelector() {\n  //passing down the full url as a param to 'useInfoAPI'\n  const countries = useStats('https://covid19.mathdro.id/api/countries');\n  console.log(countries);\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState(); //if statement for the loader to kick in (!stats) \n\n  if (!countries) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Loading...\"); //return someting JSX\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(\"select\", {\n    onChange: event => {\n      setSelconsole.log(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, Object.entries(countries.countries).map(([country, code]) => __jsx(\"option\", {\n    key: code,\n    value: code,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, country))));\n} //Object.entries first to be able to run map on a array\n//Arrow function implies a return () instead of {}\n//","map":{"version":3,"sources":["/Users/Domingo/WEB-Project/COVI-19/components/CountrySelector.js"],"names":["useStats","useState","CountrySelector","countries","console","log","selectedCountry","setSelectedCountry","event","setSelconsole","target","value","Object","entries","map","country","code"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC;AACA,QAAMC,SAAS,GAAGH,QAAQ,CAAC,0CAAD,CAA1B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,QAAM;AAAA,OAACG,eAAD;AAAA,OAAkBC;AAAlB,MAAwCN,QAAQ,EAAtD,CAJwC,CAKxC;;AACA,MAAI,CAACE,SAAL,EAAgB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,CANwB,CAOxC;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,QAAQ,EAAEK,KAAK,IAAI;AACjBC,MAAAA,aAAa,CAACJ,GAAd,CAAkBG,KAAK,CAACE,MAAN,CAAaC,KAA/B;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGC,MAAM,CAACC,OAAP,CAAeV,SAAS,CAACA,SAAzB,EAAoCW,GAApC,CAAwC,CAAC,CAACC,OAAD,EAASC,IAAT,CAAD,KACvC;AAAQ,IAAA,GAAG,EAAEA,IAAb;AACQ,IAAA,KAAK,EAAEA,IADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGD,OAFH,CADD,CALH,CADF,CADF;AAgBD,C,CAIK;AACA;AACA","sourcesContent":["import useStats from '../utils/useStats';\nimport { useState } from 'react';\n\nexport default function CountrySelector() {\n  //passing down the full url as a param to 'useInfoAPI'\n  const countries = useStats('https://covid19.mathdro.id/api/countries');\n  console.log(countries); \n  const [selectedCountry, setSelectedCountry] = useState();\n  //if statement for the loader to kick in (!stats) \n  if (!countries) return <p>Loading...</p>;\n  //return someting JSX\n  return (\n    <div>\n      <select\n        onChange={event => {\n          setSelconsole.log(event.target.value);\n        }}\n        >\n        {Object.entries(countries.countries).map(([country,code]) => (\n          <option key={code} \n                  value={code}>\n            {country}\n            </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\n\n\n      //Object.entries first to be able to run map on a array\n      //Arrow function implies a return () instead of {}\n      //\n"]},"metadata":{},"sourceType":"module"}